" Set Up an XDG compliant config
if empty($XDG_CACHE_HOME)
    let $XDG_CACHE_HOME="$HOME/.cache"
endif
if empty($XDG_CONFIG_HOME)
    let $XDG_CONFIG_HOME="$HOME/.config"
endif

set directory=$XDG_CACHE_HOME/vim,~/,/tmp
set backupdir=$XDG_CACHE_HOME/vim,~/,/tmp
set undodir=$XDG_CACHE_HOME/vim,~/,/tmp
set viminfo+=n$XDG_CACHE_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$XDG_CONFIG_HOME/vim/after,$VIM,$VIMRUNTIME
let $MYVIMRC="$XDG_CONFIG_HOME/vim/vimrc"

" Map leader and localleader key to comma
let mapleader = " "
let g:mapleader = " "
let maplocalleader = " "
let g:maplocalleader = " "


" NeoBundle Scripts -------------------------------------
if has('vim_starting')
    if &compatible
        set nocompatible  " Be iMproved
    endif

    " Required:
    set runtimepath+=$XDG_CACHE_HOME/vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('$XDG_CACHE_HOME/vim/bundle'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" Add or remove your Bundles here:
" Example NeoBundle 'Shougo/neosnippet.vim'
" Example NeoBundle 'Shougo/neosnippet-snippets'
" Exmaple NeoBundle 'Shougo/vimshell', { 'rev' : '3787e5' }
NeoBundle 'Shougo/vimproc.vim', {
            \ 'build' : {
            \ 'windows' : 'tools\\update-dll-mingw',
            \ 'cygwin' : 'make -f make_cygwin.mak',
            \ 'mac' : 'make -f make_mac.mak',
            \ 'linux' : 'make',
            \ 'unix' : 'gmake',
            \ },
            \}

" Unite and modules
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'Shougo/unite-help'
NeoBundle 'Shougo/unite-session'


" Google CodeFmt
NeoBundle 'google/maktaba'
NeoBundle 'google/glaive'
NeoBundle 'google/vim-codefmtlib', {'name' : 'codefmtlib' }
NeoBundle 'google/vim-codefmt', {'name' : 'codefmt'}

" Tabular
NeoBundle 'godlygeek/tabular'

" Fish shell script syntax highlighting
NeoBundle 'dag/vim-fish'

" Git plugins
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'tpope/vim-fugitive'

" Vim Cursor Word
NeoBundle 'itchyny/vim-cursorword'

" Required:
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

" Configure Glaive
call glaive#Install()


" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
syntax on

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set hlsearch		" Highlight search terms
set mouse=a		" Enable mouse usage (all modes)

" Show the ruler and numbers
set ruler
" Show the line number on the current line and relative line numbers
" everywhere else.
set number
set relativenumber

" Set the tab configuration
set shiftwidth=4
set tabstop=4
set expandtab

" Set the default wrapping and 80 column highlighting
set wrap
set colorcolumn=81


set visualbell

" Configure Spelling
setglobal spell spelllang=en_au
autocmd FileType gitcommit,markdown setlocal spell

" Set the colours
set t_Co=256
colorscheme refactor

" Markdown
autocmd BufNewFile,BufFilePre,BufRead *.md,*.markdown,*.mdown,*.mkd,*.mkdn,README.md  set filetype=markdown

" Sort out the silly X11 clipboard
if has ('unnamedplus')
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif

"
" Unite configuration
"

" Use The Platinum Searcher for grepping
"if has('unix')
"    if executable('pt')
"      let g:unite_source_grep_command = 'pt'
"      let g:unite_source_grep_default_opts = '--nogroup --nocolor'
"      let g:unite_source_grep_recursive_opt = ''
"      let g:unite_source_grep_encoding = 'utf-8'
"    endif
"endif
"
" Use the fuzzy matcher for everything
call unite#filters#matcher_default#use(['matcher_fuzzy'])

" Map ",g" to Unite buffer search
nnoremap <silent> <LEADER>g :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
" Map Control P to file searching
nnoremap <C-P> :Unite file_rec/async<CR>
" Map " /" to grep
nnoremap <LEADER>/ :Unite grep:.<CR>
" Map " y" to a yank ring esc setup.
let g:unite_source_history_yank_enable = 1
nnoremap <LEADER>y :Unite history/yank<CR>
" Map " s" to buffer switching
nnoremap <LEADER>s :Unite -quick-match buffer<CR>

" Insert the date and time for posts
map! <F5> <C-R>=strftime('%Y-%m-%d %H:%M')<CR>
